{"version":3,"sources":["images/title.png","images/logo.png","services/api.js","components/Header.js","components/CharacterDetail.js","components/Character.js","components/CharacterList.js","components/FilterCharacter.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchRickyMorty","fetch","then","response","json","data","results","map","character","id","name","spiece","species","image","status","episode","origin","Header","className","src","title","alt","logo","CharacterDetail","props","console","log","dontExist","icon","faDizzy","to","faArrowCircleLeft","length","Character","key","CharacterList","dataCharacters","characters","FilterCharacters","onChange","ev","preventDefault","type","placeholder","handleFilter","value","target","Home","FilterCharacter","App","useState","setCharacters","characterFilter","setCharacterFilter","useEffect","renderFilterCharacter","filter","toUpperCase","includes","exact","path","render","characterId","parseInt","match","params","foundCharacter","find","undefined","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d848cfc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.35f4e68b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.779837d7.png\";","const fetchRickyMorty = () => {\n  return fetch('https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json')\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          name: character.name,\n          spiece: character.species,\n          image: character.image,\n          status: character.status,\n          episode: character.episode,\n          origin: character.origin.name,\n        };\n      });\n    });\n};\n\nexport default fetchRickyMorty;\n","import React from 'react';\nimport title from '../images/title.png';\nimport logo from '../images/logo.png';\nimport '../stylesheets/Header.scss';\n\nconst Header = () => {\n  return (\n    <header className='header__container'>\n      <img className='header__container__title' src={title} alt='Título Rick & Morty' />\n      <img className='header__container__logo' src={logo} alt='Logo Rick & Morty' />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../stylesheets/CharacterDetail.scss';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faArrowCircleLeft, faDizzy} from '@fortawesome/free-solid-svg-icons';\n\nconst CharacterDetail = (props) => {\n  console.log(props);\n\n  const {image, name, status, spiece, origin, episode} = props.character;\n  const dontExist = status === 'Dead' ? <FontAwesomeIcon icon={faDizzy} /> : ' ¡Your character is alive! ';\n  return (\n    <main className='container__main'>\n      <div className='container__main__div'>\n        <Link to='/'>\n          <span className='container__main__link'>\n            <FontAwesomeIcon icon={faArrowCircleLeft} />\n            return to the starting box!\n          </span>\n        </Link>\n      </div>\n      <article className='container__article'>\n        <img src={image} alt={name} className='container__article--img' />\n        <section className='container__section'>\n          <h3 className='container__section--name'>Name: {name}</h3>\n          <p className='container__section--text'>State: {dontExist}</p>\n          <p className='container__section--text'>Spiece: {spiece}</p>\n          <p className='container__section--text'>Episodes: {episode.length}</p>\n          <p className='container__section--text'>Origin: {origin}</p>\n        </section>\n      </article>\n    </main>\n  );\n};\n\nexport default CharacterDetail;\n","import React from 'react';\nimport '../stylesheets/Character.scss';\nimport {Link} from 'react-router-dom';\n\nconst Character = (props) => {\n  const {image, name, spiece, id} = props.character;\n  return (\n    <li className='item__list' key={id}>\n      <img className='item__list--img' src={image} alt={`Foto de ${name}`} />\n      <section className='item__text'>\n        <Link to={`/character/${id}`}>\n          <h3 className='item__list--name'>{name}</h3>\n          <p className='item__list--text'>{spiece}</p>\n        </Link>\n      </section>\n    </li>\n  );\n};\n\nexport default Character;\n","import React from 'react';\nimport Character from './Character';\nimport '../stylesheets/CharacterLlist.scss';\n\nconst CharacterList = (props) => {\n  const dataCharacters = props.characters.map((character, id) => {\n    return <Character key={id} character={character} />;\n  });\n  return (\n    <section>\n      <ul className='item__container'>{dataCharacters}</ul>\n    </section>\n  );\n};\n\nexport default CharacterList;\n","import React from 'react';\nimport '../stylesheets/Filter.scss';\n\nconst FilterCharacters = (props) => {\n  const handleChange = (ev) => {\n    props.handleFilter({\n      value: ev.target.value,\n      key: 'name',\n    });\n  };\n  const handleForm = (ev) => {\n    ev.preventDefault();\n  };\n  return (\n    <form className='input__container' onChange={handleForm}>\n      <label>¡Search here for your character!</label>\n      <input type='text' placeholder='Write here' className='input__text' name='name' id='name' onChange={handleChange} />\n    </form>\n  );\n};\n\nexport default FilterCharacters;\n","import React, {Fragment} from 'react';\nimport CharacterList from './CharacterList';\nimport FilterCharacters from './FilterCharacter';\nconst Home = (props) => {\n  return (\n    <Fragment>\n      <FilterCharacters handleFilter={props.handleFilter} />\n      <CharacterList characters={props.characters} />\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, {useState, useEffect} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport '../stylesheets/App.scss';\nimport fetchRickyMorty from '../services/api';\nimport Header from './Header';\nimport CharacterDetail from './CharacterDetail';\nimport Home from './Home';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [characterFilter, setCharacterFilter] = useState('');\n\n  useEffect(() => {\n    fetchRickyMorty().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  const handleFilter = (data) => {\n    if (data.key === 'name') {\n      setCharacterFilter(data.value);\n    }\n  };\n\n  const renderFilterCharacter = characters.filter((character) => {\n    return character.name.toUpperCase().includes(characterFilter.toUpperCase());\n  });\n\n  const renderCharacterDetail = (props) => {\n    console.log(props);\n    const characterId = parseInt(props.match.params.id);\n    const foundCharacter = characters.find((character) => character.id === characterId);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail character={foundCharacter} />;\n    }\n  };\n  return (\n    <div className='app__container'>\n      <Header />\n\n      <Switch>\n        <Route exact path='/'>\n          <Home characters={renderFilterCharacter} handleFilter={handleFilter} />\n        </Route>\n        <Route path='/character/:id' render={renderCharacterDetail} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport {HashRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}